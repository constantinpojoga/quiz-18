
// return viewport unit for a pixel value at a given width.
@function viewportUnit($pixelValue, $targetedWidth) {
	@if (is-number($pixelValue) and (is-number($targetedWidth) or global-variable-exists('`#{$targetedWidth)}`'))) {
		@return (($pixelValue/$targetedWidth) * 100) + vw;
	}

	@error "Value needs to be pixel: `#{$pixelValue}` or `#{$targetedWidth}`";

}

// check to see if a key is last in a particular map
@function isLast($map, $key) {

  $mapLength: length($map);
  $loopCounter: 1;

  // $k = key; $v = value; $m = map
  @each $k, $v in $map {

  	@if ($loopCounter == $mapLength) {

  		@if ($key == $k) {

  			@return true;

  		} @else {

  			@return false;

  		}
  	}

  	$loopCounter: $loopCounter + 1;

  }

  @return false;
}

// check to see if a key is first in a particular map
@function isFirst($map, $key) {

  $mapLength: length($map);
  $loopCounter: 1;

  // $k = key; $v = value; $m = map
  @each $k, $v in $map {

  	@if ($loopCounter == 1) {

  		@if ($key == $k) {

  			@return true;

  		} @else {

  			@return false;

  		}
  	}

  	$loopCounter: $loopCounter + 1;

  }

  @return false;
}

////
// A collection of function for advanced type checking
// @author Hugo Giraudel
////

@function is-number($value) {
  @return type-of($value) == 'number';
}

@function is-time($value) {
  @return is-number($value) and index('ms' 's', unit($value)) != null;
}

@function is-duration($value) {
  @return is-time($value);
}

@function is-angle($value) {
  @return is-number($value) and index('deg' 'rad' 'grad' 'turn', unit($value)) != null;
}

@function is-frequency($value) {
  @return is-number($value) and index('Hz' 'kHz', unit($value)) != null;
}

@function is-integer($value) {
  @return is-number($value) and round($value) == $value;
}

@function is-relative-length($value) {
  @return is-number($value) and index('em' 'ex' 'ch' 'rem' 'vw' 'vh' 'vmin' 'vmax', unit($value)) != null;
}

@function is-absolute-length($value) {
  @return is-number($value) and index('cm' 'mm' 'in' 'px' 'pt' 'pc', unit($value)) != null;
}

@function is-percentage($value) {
  @return is-number($value) and unit($value) == '%';
}

@function is-length($value) {
  @return is-relative-length($value) or is-absolute-length($value);
}

@function is-resolution($value) {
  @return is-number($value) and index('dpi' 'dpcm' 'dppx', unit($value)) != null;
}

@function is-position($value) {
  @return is-length($value) or is-percentage($value) or index('top' 'right' 'bottom' 'left' 'center', $value) != null;
}

/////////////////////////////////////
// Function to replace characters in a string
/////////////////////////////////////
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
      @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(str-slice($string, $index +
      str-length($search)), $search, $replace);
  }
  @return $string;
}

/////////////////////////////////////
// Function to create an optimized svg url
// (may need a few extra replacements)
/////////////////////////////////////
@function old-svg-url($svg) {
  $svg: str-replace($svg, '"', "'");
  $svg: str-replace($svg, '<', '%3C');
  $svg: str-replace($svg, '>', '%3E');
  $svg: str-replace($svg, '&', '%26');
  $svg: str-replace($svg, '#', '%23');
  @return url("data:image/svg+xml;charset=utf8,#{$svg}");
}

@function svg-url($svg) {
  /////////////////////////////////////
  // Chunk up string in order to avoid
  // "SystemStackError: stack level too deep"
  /////////////////////////////////////
  $encoded:'';
  $slice: 2000;
  $index: 0;
  $loops: ceil(str-length($svg)/$slice);
  @for $i from 1 through $loops {
      $chunk: str-slice($svg, $index, $index + $slice - 1);
      $chunk: str-replace($chunk, '"', "'");
      $chunk: str-replace($chunk, '<', '%3C');
      $chunk: str-replace($chunk, '>', '%3E');
      $chunk: str-replace($chunk, '&', '%26');
      $chunk: str-replace($chunk, '#', '%23');
      $encoded: #{$encoded}#{$chunk};
      $index: $index + $slice;
  }

  @return url("data:image/svg+xml;charset=utf8,#{$encoded}");
}

@function chevron-right($color: $green) {
  @return svg-url('<svg xmlns="http://www.w3.org/2000/svg" width="7.6" height="12.36" viewBox="0 0 7.6 12.36"><title>chevron-right</title><path d="M.54,12.36,0,11.72l6.32-5L0,.6.57,0l7,6.73Z" transform="translate(0 0)" style="fill:#{$color}"/></svg>')
}

@function chevron-down($color: $green) {
  @return svg-url('<svg xmlns="http://www.w3.org/2000/svg" width="26.4" height="7.9" viewBox="0 0 26.4 7.9"><title>chevron-down</title><path d="M26.4,1.8,13.2,7.9,0,1.8.8,0,13.2,5.7,25.6,0Z" style="fill:#{$color}"/></svg>')
}

@function close-x($color: $green) {
  @return svg-url('<svg xmlns="http://www.w3.org/2000/svg" width="20.49" height="20.52" viewBox="0 0 20.49 20.52"><title>close</title><path d="M13.06,10.26l7.43,7.43-2.83,2.83-7.43-7.43-7.4,7.4L0,17.66l7.4-7.4L0,2.86,2.83,0l7.4,7.4L17.66,0l2.83,2.83Z" style="fill:#{$color}"/></svg>')
}

@function chevron-circle-right($color: $green) {
  @return svg-url('<svg xmlns="http://www.w3.org/2000/svg" width="21.42" height="21.41" viewBox="0 0 21.42 21.41"><title>Untitled-1</title><path d="M10,15.47l-1.29-1L11.35,11,8.68,6.83,10,6l3.27,5.15ZM21.42,10.7a10.71,10.71,0,1,0-10.71,10.7A10.72,10.72,0,0,0,21.42,10.7Zm-1.62,0a9.09,9.09,0,1,1-9.09-9.09A9.1,9.1,0,0,1,19.8,10.7Z" transform="translate(0 0)" style="fill:#{$color}"/></svg>')
}